name: CI Linux

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      libraries:
        description: "Build libraries"
        type: string
        default: '["simpledbus","simplebluez"]'
        required: false

jobs:
  tests:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        library: ['simpledbus', 'simplebluez']
        variant:
          - { name: 'unit', config: 'Release', options: '-D${{ (matrix.library == ''simpledbus'') && ''SIMPLEDBUS'' || ''SIMPLEBLUEZ'' }}_TEST=ON', run_extra: '' }
          - { name: 'asan', config: 'Debug', options: '-D${{ (matrix.library == ''simpledbus'') && ''SIMPLEDBUS'' || ''SIMPLEBLUEZ'' }}_SANITIZE=Address -D${{ (matrix.library == ''simpledbus'') && ''SIMPLEDBUS'' || ''SIMPLEBLUEZ'' }}_TEST=ON', run_extra: 'PYTHONMALLOC=malloc' }
          - { name: 'tsan', config: 'Debug', options: '-D${{ (matrix.library == ''simpledbus'') && ''SIMPLEDBUS'' || ''SIMPLEBLUEZ'' }}_SANITIZE=Thread -D${{ (matrix.library == ''simpledbus'') && ''SIMPLEBLUEZ'' }}_TEST=ON', run_extra: '' }
        exclude:
          - library: 'simpledbus'
            variant: { name: 'unit' }
            if: ${{ !contains(inputs.libraries, 'simpledbus') }}
          - library: 'simpledbus'
            variant: { name: 'asan' }
            if: ${{ !contains(inputs.libraries, 'simpledbus') }}
          - library: 'simpledbus'
            variant: { name: 'tsan' }
            if: ${{ !contains(inputs.libraries, 'simpledbus') }}
          - library: 'simplebluez'
            variant: { name: 'unit' }
            if: ${{ !contains(inputs.libraries, 'simplebluez') }}
          - library: 'simplebluez'
            variant: { name: 'asan' }
            if: ${{ !contains(inputs.libraries, 'simplebluez') }}
          - library: 'simplebluez'
            variant: { name: 'tsan' }
            if: ${{ !contains(inputs.libraries, 'simplebluez') }}

    steps:
    - name: Clone Repository
      uses: actions/checkout@v4
    - name: Install Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -H apt-get update -y
        sudo -H apt-get install -y dbus libdbus-1-dev python3-dev
        sudo -H pip3 install -r $(pwd)/simpledbus/test/requirements.txt
        echo "Running for libraries: ${{ inputs.libraries }}"
    - name: Setup cmake
      uses: ./.github/actions/setup-cmake
    - name: Setup gtest
      uses: ./.github/actions/setup-gtest
    - name: Start DBus
      run: |
        echo "DBUS_SESSION_BUS_ADDRESS=$(dbus-daemon --config-file=/usr/share/dbus-1/session.conf --print-address --fork | cut -d, -f1)" >> $GITHUB_ENV

    - name: Build and Test ${{ matrix.library }} (${{ matrix.variant.name }})
      uses: ./.github/actions/build-native
      with:
        os: 'linux'
        source-dir: '$(pwd)/${{ matrix.library }}'
        build-dir: '$(pwd)/build_${{ matrix.variant.name }}_${{ matrix.library }}'
        install-prefix: '$(pwd)/build_${{ matrix.variant.name }}_${{ matrix.library }}/install'
        build-config: '${{ matrix.variant.config }}'
        library-type: 'static'
        cmake-options: '-DGTEST_ROOT=$(pwd)/googletest/install ${{ matrix.variant.options }}'
        parallel-jobs: '4'
    - name: Run ${{ matrix.library }} Tests (${{ matrix.variant.name }})
      run: |
        ${{ matrix.variant.run_extra }} $(pwd)/build_${{ matrix.variant.name }}_${{ matrix.library }}/bin/${{ matrix.library }}_test
        if [[ "${{ matrix.variant.name }}" == "asan" || "${{ matrix.variant.name }}" == "tsan" ]]; then
          cp "$(ls ${{ matrix.variant.name == "asan" && "asan" || "tsan" }}_log.txt.* | head -1)" ${{ matrix.variant.name }}_log.txt || true
          (test ! -f ${{ matrix.variant.name }}_log.txt && echo "No ${{ matrix.variant.name | upper }} log found") || (cat ${{ matrix.variant.name }}_log.txt && exit 1)
        fi

  examples:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        library: ['simpledbus', 'simplebluez']
        exclude:
          - library: 'simpledbus'
            if: ${{ !contains(inputs.libraries, 'simpledbus') }}
          - library: 'simplebluez'
            if: ${{ !contains(inputs.libraries, 'simplebluez') }}

    steps:
    - name: Clone Repository
      uses: actions/checkout@v4
    - name: Install Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -H apt-get update -y
        sudo -H apt-get install -y libdbus-1-dev
    - name: Setup cmake
      uses: ./.github/actions/setup-cmake
    - name: Compile ${{ matrix.library }} Examples
      uses: ./.github/actions/build-native
      with:
        os: 'linux'
        source-dir: '$(pwd)/examples/${{ matrix.library }}'
        build-dir: '$(pwd)/build_${{ matrix.library }}_examples'
        install-prefix: '$(pwd)/build_${{ matrix.library }}_examples/install'
        build-config: 'Release'
        library-type: 'static'
        cmake-options: ''
        parallel-jobs: '4'

  build:
    runs-on: ubuntu-22.04
    needs: [tests, examples]
    if: ${{ inputs.libraries != '[]' && inputs.libraries != '' }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        options:
          - {container: dockcross/linux-x64, target: linux-x64}
          - {container: dockcross/linux-x86, target: linux-x86}
          - {container: dockcross/linux-armv6-lts, target: linux-armv6}
        library: ${{ fromJSON(inputs.libraries) }}
        type: [static]
    container:
      image: ${{ matrix.options.container }}
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Build DBus
      uses: ./.github/actions/build-dbus
      with:
        os: ${{ runner.os }}
        arch: ${{ matrix.options.target }}
    - name: Build ${{ matrix.library }}
      uses: ./.github/actions/build-native
      with:
        os: 'linux'
        source-dir: '$(pwd)/${{ matrix.library }}'
        build-dir: '$(pwd)/build_${{ matrix.library }}'
        install-prefix: '$(pwd)/build_${{ matrix.library }}/install'
        build-config: 'Release'
        library-type: '${{ matrix.type }}'
        cmake-options: '-DCMAKE_PREFIX_PATH=/tmp/dbus/install:${CMAKE_PREFIX_PATH}'
        parallel-jobs: '4'
    - name: Package and Upload
      shell: bash
      run: |
        mkdir -p $(pwd)/artifacts
        zip -r $(pwd)/artifacts/${{ matrix.library }}_${{ matrix.type }}_${{ matrix.options.target }}.zip $(pwd)/build_${{ matrix.library }}/install
    - name: Upload binaries to job
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.library }}_${{ matrix.type }}_${{ matrix.options.target }}
        path: artifacts/${{ matrix.library }}_${{ matrix.type }}_${{ matrix.options.target }}.zip